@model IEnumerable<TaskManagementSystem_ASP.Net_MVC.Models.Task>
@using Microsoft.AspNetCore.Identity
@inject UserManager<IdentityUser> UserManager

@{
    ViewData["Title"] = "Index";
}

@functions {
    string GetPriorityColor(string priority)
    {
        switch (priority.ToLower())
        {
            case "high":
                return "red";
            case "medium":
                return "orange";
            case "low":
                return "green";
            default:
                return "black"; // Default color
        }
    }
}

<head>
    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
</head>

<body>
    <div class="addButton">
        <a asp-action="Create">
            <div class="giveBorder">
                <div class="icon"><i class="material-icons">add</i></div>
                <div class="text">Add task</div>
            </div>
        </a>
    </div>

    <div class="row">
        <div class="col form-group">
            <label name="sortby">Sort By</label>
            <form asp-action="Index" method="get">
                <select name="sortBy" class="form-control" onchange="this.form.submit()">
                    <option value="DueDate" selected="@(ViewBag.SortBy == "DueDate")">Due Date</option>
                    <option value="Priority" selected="@(ViewBag.SortBy == "Priority")">Priority</option>
                    <option value="Title" selected="@(ViewBag.SortBy == "Title")">Title</option>
                </select>
            </form>
        </div>
    </div>

    @foreach (var category in new[] { "todo", "progress", "done" })
    {
        var categoryNames = new[] { "To do", "In progress", "Done" };
        <div class="taskContainer" id="@category">
            <h3>@categoryNames[Array.IndexOf(new[] { "todo", "progress", "done" }, category)]</h3>

            @foreach (var item in Model.Where(t => t.IsCategories == category))
            {
                DateTime dueDate = item.DueDate;
                string formattedDate = dueDate.ToString("MMMM d, yyyy");

                <div class="row" data-task-id="@item.Id">
                    <div class="col">
                        <div>
                            <p class="title-text">@item.Title</p>
                            <p class="priority-text" style="color: @GetPriorityColor(item.Priority)">@Html.DisplayFor(modelItem => item.Priority)</p>
                            <p class="dueDate-text">@formattedDate</p>

                            <div class="action">
                                <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                                <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                                <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }

    <script>document.addEventListener('DOMContentLoaded', function () {
            var taskItems = document.querySelectorAll('.row');

            taskItems.forEach(function (item) {
                var taskId = item.getAttribute('data-task-id'); // Accessing data-task-id attribute

                item.addEventListener('click', function () {
                    console.log("Task ID: " + taskId);
                    window.location.href = '/Task/Details/' + taskId;
                });
            });
    });
    </script>

</body>
